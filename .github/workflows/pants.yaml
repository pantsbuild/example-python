# Copyright 2020 Pants project contributors.
# Licensed under the Apache License, Version 2.0 (see LICENSE).

# See https://pants.readme.io/docs/using-pants-in-ci for tips on how to set up your CI with Pants.

name: Pants

on: [push, pull_request]

jobs:
  org-check:
    name: Check GitHub Organization
    if: ${{ github.repository_owner == 'pantsbuild' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Noop
        run: "true"
  build:
    name: Perform CI Checks
    needs: org-check
    env:
      PANTS_CONFIG_FILES: pants.ci.toml
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: cache
      with:
        path: |
          ~/.cache/pants/setup # The initial bootstrapping of Pants
          ~/.cache/pants/named_caches  # Caches used by underlying tools like Pip and PEX.
          # If you're not using a fine-grained remote caching service (see
          # https://www.pantsbuild.org/docs/remote-caching), then you may also want to preserve
          # the local Pants cache:
          # ~/.cache/pants/lmdb_store
        # Note that this is a very non-specific key, so the cache will include the
        # setup for every prior version of Pants you've used, and a lot of old state of
        # underlying tools, and will need to be pruned from time to time.
        # See https://www.pantsbuild.org/docs/using-pants-in-ci for examples of how to do so.
        #
        # Alternatively, you could use a key like `pants-setup-${{ runner.os }}-${{ hashFiles('pants.toml') }}
        # which will invalidate when the pants version changes, but will also invalidate on any other
        # config change, which may be too aggressive.
        #
        # If you cache the lmdb_store directory, that will grow quickly and also need to be pruned.
        # A Pants-aware, fine-grained remote cache service avoids these problems.
        key: pants-setup-${{ runner.os }}
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Bootstrap Pants
      run: |
        ./pants --version
    - name: Check BUILD files
      run: ./pants tailor --check update-build-files --check
    - name: Lint and typecheck
      run: | 
        ./pants lint check ::
    - name: Test
      run: |
        ./pants test ::
    - name: Package / Run
      run: |
        # We also smoke test that our release process will work by running `package`.
        ./pants package ::
        ./pants run helloworld/main.py
    - name: Upload pants log
      uses: actions/upload-artifact@v2
      with:
        name: pants-log
        path: .pants.d/pants.log
      if: always()  # We want the log even on failures.
